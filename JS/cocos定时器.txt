
0.普通定时器 
	var timeId = setTimeout(callback, 6000);
	
	clearTimeout(timeId);
	

1. 组件直接调用 schedule()方法:
	
	var interval = 5;// 以秒为单位的时间间隔
	var repeat = 3;// 重复次数
	var delay = 10;// 开始延时
	component.schedule(function() {
		// 这里的 this 指向 component
		this.doSomething();
	}, interval, repeat, delay);
	
	上面的计时器将在10秒后开始计时，每5秒执行一次回调，重复3次。
	参数 repeat, delay 可以不传, 即表示每隔5秒执行一次, 无限重复.
	
	
2. 只执行一次的计时器（快捷方式）
	component.scheduleOnce(function() {
		 // 这里的 this 指向 component
		 this.doSomething();
	}, 2);
	 上面的计时器将在两秒后执行一次回调函数，之后就停止计时。
	 
	 
3. 取消定时器
	1)使用回调函数本身来取消计时器
		this.count = 0;
		this.callback = function () {
			if (this.count === 5) {
			 // 在第六次执行回调时取消这个计时器
			 this.unschedule(this.callback);
			}
			this.doSomething();
			this.count++;
		}
		component.schedule(this.callback, 1);
		
	2)取消组件所有计时器
		component.unscheduleAllCallbacks() 
		
4. 如果需要每一帧都执行一个函数，在 Component 中添加 update 函数，这个函数将默认被每帧调用，这在 生命周期文档 中有详细描述
	将组件的 enabled 属性设置为true时则会每帧调用 update()
	
	component.enabled = true 
	