
1. 在微信开放平台 https://open.weixin.qq.com/ 注册好账号后，申请appid ,我的微信开放平台账号密码 chenhlb@163.com , 11612380 
	其中创建的一个应用信息如下：

	微信appid： 
	游戏包名： com.hlb.tcard
	md5: 40b82a474b57d7b3a3c9c9ed80dc069f

	AppID：wx708e74f728e0e612
	AppSecret：20cd63bf9dc2068c7023c9e35ce96067
	
	或者使用上线棋牌游戏的包名和签名:
		别名： pyqps.keystore
		口令： 9happypyqps2018
		安卓包名：com.happy9.pyqps
		签名：355f9e949bd9525dc68adb98f2786c03	

	
2. 打开微信开放平台官网， 查看一下注册你的应用程序。如果没有则需要创建应用,
   在官网 管理中心 中 ，点 创建移动应用, 按步骤来填写提交。
   
   其中 签名和包名需要匹配哦, 对于签名(其实就是签名文件的md5)的获取,可在菜单 资源中心/资源下载/android资源下载
   下看到签名生成工具, 也可参考自己的笔记 <生成签名.txt>
   
3. 菜单 资源中心/移动应用/接入指南/android接入指南 配置好环境,
	1)proj.android-studio/app/build.gradle中添加：
	
		dependencies {
			implementation 'com.tencent.mm.opensdk:wechat-sdk-android-without-mta:+'
		}
		
		.... 
		
		signingConfigs {
		    release {
				if (project.hasProperty("RELEASE_STORE_FILE")) {
					storeFile file(RELEASE_STORE_FILE)
					storePassword RELEASE_STORE_PASSWORD
					keyAlias RELEASE_KEY_ALIAS
					keyPassword RELEASE_KEY_PASSWORD
				}
		    }

			debug { //确保debug版本也打上签名，否则无法调试信息.
				if (project.hasProperty("RELEASE_STORE_FILE")) {
					storeFile file(RELEASE_STORE_FILE)
					storePassword RELEASE_STORE_PASSWORD
					keyAlias RELEASE_KEY_ALIAS
					keyPassword RELEASE_KEY_PASSWORD
				}
			}		
		}
		
	2)当前包名为 com.happy9.pyqps 那么在 com.happy9.pyqps.wxapi 目录下新建文件 WXEntryActivity.java，
		
		此文件用于启动 微信响应后 通知 JS 。
		
		在 onCreate() 获取实例，注册到微信；
		
		public void onResp(BaseResp baseResp) 处理响应;
		
		需要在 AndroidManifest.xml中加上exported属性，设置为true导出, 该Activity才能自动被调用
        <activity
            android:name="com.happy9.pyqps.wxapi.WXEntryActivity"
            android:label="@string/app_name"
            android:theme="@android:style/Theme.Translucent.NoTitleBar"
            android:exported="true"
            android:taskAffinity="com.happy9.pyqps.wxapi"
            android:launchMode="singleTask">
        </activity>		
		

4. 获取授权时 java代码如下：
        mContext.runOnUiThread(new Runnable() {
            @Override
            public void run() {
                try {
                    SendAuth.Req req = new SendAuth.Req();
                    req.scope = "snsapi_userinfo";
                    req.state = "klqpdn";
                    api.sendReq(req);
                }
                catch (Exception e) {
                    Log.e(Constant.LOG_TAG, e.toString(), e);
                }
            }
        });	
		
		结果在 WXEntryActivity.java 中的 onResp() 返回错误码 ErrCode ERR_BAN = -6，经分析，是签名没成功打上。
		
		校验：将生成的APK解压出 META-INF 文件夹, cmd 到该目录下，执行命令
			keytool -printcert -file CERT.RSA
		就能看到 apk 对应的签名md5是否正确。
		
		
5. 分享是免费的,而登录功能是收费的，需要开发者进行资质认证后才能登录，支付, 每年300元
	参考 账号中心/开发者资质认证
	

6. AppActivity.java中微信分享函数如下：
	//title:标题 ; text:分享的文本内容; imgPath:分享的图片路径; url:分享成功后点击链接将直接前往改网站; bTimeLine:是否分享到朋友圈,默认分享给朋友
    public static void onWXShare(String title, String text, String imgPath, String url, boolean bTimeLine) {
        Log.d("HLB", "=== onWXShare ===");

        WXWebpageObject webpage = new WXWebpageObject();
        webpage.webpageUrl = url;
        WXMediaMessage msg = new WXMediaMessage();
        msg.mediaObject = webpage;
        msg.title = title;
        msg.description = text;
        SendMessageToWX.Req req = new SendMessageToWX.Req();
        if (! "".equals(imgPath)) {
            BitmapFactory.Options options = new BitmapFactory.Options();
            options.inSampleSize = 2;
            Bitmap img = BitmapFactory.decodeFile(imgPath, options);
            WXImageObject wxImage = new WXImageObject(img);
            req.transaction = "img";
        }
        else {
            req.transaction = "webpage";
        }

        req.message = msg;
        if (bTimeLine) {
            req.scene = SendMessageToWX.Req.WXSceneTimeline;
        }
        else {
            req.scene = SendMessageToWX.Req.WXSceneSession;
        }
        api.sendReq(req);
    }
	
7. 添加权限
	AndroidManifest.xml 设置，添加必要的权限支持:
	<uses-permission android:name="android.permission.INTERNET"/>
	<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
	<uses-permission android:name="android.permission.ACCESS_WIFI_STATE"/>
	<uses-permission android:name="android.permission.READ_PHONE_STATE"/>
	<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
	
8. lua 调用分享
	local luaj = require "cocos.cocos2d.luaj"
	local className="org/cocos2dx/lua/AppActivity"
	local arg="(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V" --中间不能有空格,否则调用失败
	local params = {"mytitle", "mydesc", "", "www.hao123.com", true}
	luaj.callStaticMethod(className, "onWXShare", params, arg)

  
  
  
  