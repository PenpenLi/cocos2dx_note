												
												
												NDK构建Debug/Release版本小记

最近项目终于要上线了，突然想到要把构建模式切换到Release，我们的项目使用Gradle作为构建工具，Java代码可以使用Gradle的Task来选择Release模式，但是使用NDK编译的native库呢？

用ndk-build命令编译代码时，虽然不像Xcode那样修改一下Scheme就可以选择Debug或Release模式，但也只需要设置一个参数就可以了，这里做个简单介绍，详情可以参考NDK的官方文档。

ndk-build有一个可选参数：NDK_DEBUG，从NDK r5开始，可以使用NDK-DEBUG来切换Debug和Release模式。


    $NDK/ndk-build NDK_DEBUG=1  =&gt; forces the generation of debug binaries
    $NDK/ndk-build NDK_DEBUG=0  =&gt; forces the generation of release binaries
 
如果不指定NDK_DEBUG参数，ndk-build会根据AndroidManifest.xml的设置来，如果指定了android:debuggable=”true”，则生成Debug版，否则默认是Release版。如果使用Android SDK r8或更高的build-tools，会根据ADT插件的选项，或者构建工具的模式，自动添加NDK_DEBUG参数。

NDK生成的Release和Debug不同模式的object文件会被存在不同的目录里，在切换构建模式时，不用重新编译。

NDK_DEBUG参数仅仅是控制使用哪种构建模式，对Release进行一些编译优化等，如果在Debug和Release模式有些工程设置不一样的话，还需要添加一些自定义宏。比如，Cocos2DX在Debug模式下还需要定义宏COCOS2D_DEBUG=1，我们使用的Json库也需要定义宏JSON_DEBUG=1，
游戏逻辑里还需要定义宏DEBUG=1来控制一些调试代码。这些宏定义在Xcode中是分开定义在工程构建设置里的，非常方便，用ndk-build编译的话都得自己写了。

这些宏可以定义在Application.mk文件里，Application.mk实际上是个轻量级的GNU Makefile，语法类似，在执行ndk-build命令时传入的参数会被传递到Application.mk里，比如，在执行ndk-build命令时传入‘NDK_BUILD=1’，在Application.mk文件添加以下语句：



ifeq ($(NDK_DEBUG),1)
APP_CPPFLAGS += -DCOCOS2D_DEBUG=1 -DJSON_DEBUG=1 -DDEBUG=1
endif
根据NDK_DEBUG是否为1就可以判断是否是需要添加Debug相关的参数。

同理，在执行ndk-build命令时传入‘BUILD_X86=TRUE’，在Application.mk文件添加以下语句，还可以判断是否需要编译x86版本：


ifeq ($(BUILD_X86),TRUE)
APP_ABI += x86
endif
