
lua:
1. 计算代码段执行时间： os.clock() , 在代码段开始和结束位置调用该函数，计算前后时间差即可得到代码段总共执行时间.

2. os.time() 获取当前时间秒
   os.time({year=yy, month=mm, day=dd, hour=23,min=59, sec=59}) 返回指定时间的秒数
   
3. local tbl = os.date("*t", curTime)  将秒数转化为 table 表数据, 程序中可访问tbl表中的成员：year, month, day, hour, min, sec, wday
   
   print("cur date str: ",os.date("%Y/%m/%d/ %X",curTime))
	
C++:
c++11中的日期和时间库 std::chrono , 比如时间差 (微妙/毫秒转化为秒)

    auto now = std::chrono::steady_clock::now();
    dt = std::chrono::duration_cast<std::chrono::microseconds>(now - _lastUpdate).count() / 1000000.0f; 微妙-->秒
	dt = std::chrono::duration_cast<std::chrono::milliseconds>(now - _lastUpdate).count() / 1000.0f;  --毫秒-->秒
	_lastUpdate = now;
 
 
 const std::string getCurrentSystemTime()
{
	auto tt = std::chrono::system_clock::to_time_t
	(std::chrono::system_clock::now());
	struct tm* ptm = localtime(&tt);
	char date[60] = {0};
	sprintf(date, "%d-%02d-%02d      %02d:%02d:%02d",
		(int)ptm->tm_year + 1900,(int)ptm->tm_mon + 1,(int)ptm->tm_mday,
		(int)ptm->tm_hour,(int)ptm->tm_min,(int)ptm->tm_sec);
	return std::string(date);
}